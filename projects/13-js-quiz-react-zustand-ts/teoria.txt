!!! ZUSTAND !!!.- Es una alternativa a redux es mucho mas sencillo, es un manejador de estados globales pensado especialmente para React.

Cual es la diff de redux y zustand?.- 

-REDUX TOOLKIT:
  Desventajas
  - Tiene mucho boilerplate, tenemos que muchas veces repetir   acciones para lograr un mismo objetivo.

  - Ocupa 20kb más o ménos.
  - Complicado para principiantes.
  - Mucho códig para pequeños cambios.
  - Muchos conceptos y opinionado(opinion del frameqork, tienen una opinion que te obligan a seguirla para poder utilizarlo.
  - Podemos usar redux para proyectos medianos pero tampoco poco grandes.

  Positivo
    - Mutabilidad por defecto.

-ZUSTAND:
  Ventajas
  - Muy simple, tan simple que no tiene configuracion nu provider
  - Ocupa 1,1kb.
  - No está opinionado.
  - Se usaría siempre que se pueda porque, porque, es muy sencillo escala muy bien, y puede serpararlo al infinito de una forma muy comoda.
  - Zustand siempre actualiza el estado como si lo estuviese extendiendo cosa de que si nosotros tenemos mas de un estado no es necesario hacer ...state para taernos todo lo que tenia.

  Desventajas:
  -Hay que hacer mutabilidad.
  - No lo usariamos para app muy grandes y para todo el estado global
  - Con zustand no es necesario envolver con nada nuestra app para poder tener un estado global, lo unico que hace falta es crear un archivo con el nombre que sea y crear la función que vamos a usar por ejm un contador con zustand ejm:

    store-zustand.js
    import create from 'zustand'

    export const useCounterStore = crear((set) => ({
        // state
        count: 0
        // "actions" o funciones a realizarse para que el estado cambie
        increment: () => {
            set((state) => ({ count: state.count + 1 }))         
        }
        decrement: () => {
            set((state) => ({ count: state.count - 1 }))         
        },
        increaseBtValue: (value) => {
            set((state) => ({ count: state.count + value }))         
        }
    }))

    ejm de zustand

Cuando podemos usar el React.Context
 Para estados que cambian poco o nada, como por ejm estado del usuario, el tema de web claro u obscuro. y evitar el prop driling.

Una cosa que tiene zustand es que cuando nosotros creamos la por ejm este customHopok de useCounterStore para usarlo en un component, en zustand para evitar rereenderizados devemos de sacar las "actions" que creamos en nuestro custom hook por separado ejm:

 const count = useCounterStore(state => state.count) 
 const increment = useCounterStore(state => state.increment) etc con esto le decimos que tiene que sacar del estado.

Podemos hacerlo de otra manera que funciona tambien con destruccturacón ejm :
const [
  count,
  increent,
  decrement
 ] = useCounterStore((state) => [
   state.count,
   state.increment,
   state.decrement
 ])

y se ejecutaria funciones por ejm el increment directo onclick(increment) no como tenemos que usar el dispatch tambein y ejecutar eso en el onClick={() => dispatch(increment())}

! ZUSTAND !.- Como constuir un estado global y pasos a seguir de como trabajar con zustand:

1) Instalamos
   - pnpm add zustand -E

2) Luego podemos crear un carpeta store dentro de src y ese será nuestro estado global como redux más o ménos. ver ejm src/store/questions.ts ejm
    export const useQuestionStore = create<State>((set, get) => {
    return {
      questions: [],
      currentQuestions: 0,
      fetchQuetions: async (limit: number) => {
        console.log('questions')
      }
    }
    Explain => creamos un customHook usequestionStore en este caso, luego este create recibe un callback este a su vez recibe un parametro set, que es el encargado de actualizar nuestro estado, luego este callback devuelve un objeto que será el estado global, no solo tendremos solo el estado si no también las formas de actualizar el estado

    La prop get en cambio con el podemos leer el estado.
})

3) Como obtenemos ese estado global ejm App.tsx, lo que tenemos que hacer es llamar a nuestro hook que creamos useQuetionStore, y sacamos de ahí nuestro estado en la función ejm:

const questions = useQuestionStore(state => state.questions) 
como vemos aqui el useQuestionStore recibe una función en la cual nos devuelve el statdo solo tenemos que acceder a que estado queremos obtener en este caso questions, si queremos otro estado pues hacemos lo mismo 

const currentQuestion = useQuestionStore(state => state.currentQuestion) 

Cons zustand también podemos nosotros crear los middlewares que queremos.
Para poder hacer persistencia de datos por ejm aqui nosotros vamos a persisitir lo que el usuario a respondido de las peguntas en nuestro localStorage:

1) En nuestro store importamos persist, este persist lo que hace es capturar todos los cambios que queremos hacer en la store y lo sincroniza con el localStore, sessionStorogae, lo sincroniza con lo que queramos.
  - import { persist } from 'zustand/middleware'

2) en nuestra store en el hook que se crea tenemos que envolver todo este hook con el persist
    const useQuestionsStore = create(persist((set, get) => {
      return {
        funciones: ...
        funciones: ...
        funciones: ...
      }
    }))

3) Debemos de darle un nombre a esa persistencia por si queremos persistir varias store
   const useQuestionsStore = create(persist((set, get) => {
      return {
        funciones: ...
        funciones: ...
        funciones: ...
      }
    }, {
      name: 'questions',
      getStorage: () => localStorage => aqui indicamos donde queremos guardar donde cumpla la API por defecto usa el localstorage
    }))

4) Podemos usar también las deftools, que es igual un middleware y envolvemos nuestro hook o store con esto
   - import { persist } from 'zustand/middleware'

   Podemos incluso nombrar nuestras acciones porque por defecto nos da anonymos la devtools colocando en el set un nombre específico ejm

   ...
   set({ questions: newQuestions}, false, 'FETCH_QUESTIONS')