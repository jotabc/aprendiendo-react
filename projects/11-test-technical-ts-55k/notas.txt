Método sort.- El metodo sort debemos de tener presente nosotros que este sort siempr muta el array original, por lo que para un filtro de sort debemos nosotros de asegurarnos de hacer una copia del array orginal a sortear para que me devuelva el correcto ejm =>

// INCORRECTO
const sortedUsers = sortByCountry
    ? users.sort((a, b) => {
        return a.location.country.localeCompare(b.location.country)
      })
    : users

// CORRECTO
const sortedUsers = sortByCountry
? [...users].sort((a, b) => {
    return a.location.country.localeCompare(b.location.country)
    })
: users

// CORRECTO => Este es un nuevo método de array del toSorted, aunque no esta disponible entods los navegadores. Con toSorted le indicamos que queremos hacer la copia, el toSorted hace exactamente lo mismo que el sort pero devuelve un nuevo array.

const sortedUsers = sortByCountry
? users.toSorted((a, b) => {
    return a.location.country.localeCompare(b.location.country)
    })
: users

Para ts podemos nosotros tipar o mejor dicho hacer un generico global de ts, porque nos da un error de tipo que toSorted no existe en el tipo tal. Lomque podemos hacer es saber como siquiera extender los prototipos de array, lo podemos hacer en el archivos de types que estemos usando por ejm aquí estamos usando los users, podríamos hacerlo dentro del archivo de types de los usuarios. ejm =>

declare global {
    interface Array<T> {
        toSorted(compareFn?: (a: T, b: T) => number): T[]
    }
}

Explicación .-  
    - declare global.- extendemos el interface de array de ts.
    - interface Array<T> estamos usando la interfaz de Array.
    - Aqui dentro de colocamos lo sig:
      - toSorted - nombre de la función a extender.
      - compareFn - sería la funcion a comparar porque toSorted es una función.
      - (a: T, b: T) - Estos son los parámetros que recibe la función toSorted, que sería a y b, el :T significa de tipo generico este recibirá el tipo que tenga actualmente lo que estamos usando, es decir, si nosotros queremos usar este método para sortear usuarios por país el T será el interface user y así según sea usado.

      - => number sería lo que retorna la función, en este caso es un numero 1 o -1 dependiendo el sorteado.
      - : T[] - esto significa que devuelve un array de tipo génerico (el tipo que se está usando actualmentr, puede ser users, products etc.) 


useRef.- Sirve para guardar un valor que se comparta entre reenderizados, pero que al cambiar no vuelva a reenderizar el estado.

!!! TanStack Query !!!.- Es una biblioteca para manejo y administración de estados asíncronos. Esto hace que podamos eliminar mucho el uso de redux, porque nos da un estado global, persistencia, nos da facilidad de evitar hacer llamadas asíncronas 2 veces. Es una biblioteca que se puede usar en cualquier Framework, como React, Vue, Svelte etc.

Install: pnpm add @tanstack/react-query -E

Uso:
  1) Al tener un estado global necesitamos un provider, lo hacemos e nuestro punto de entrada main.tsx.
    Tenemos que envolver nuestra app con el provider y pasarle el client, está sería la config básica para empezar a usarlo.
    main.tsx
    import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

    const queryClient = new QueryClient()

    ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
    <QueryClientProvider client={queryClient}>
        <App />
    </QueryClientProvider>
    )

  2) Donde la vamos a usar tenemos que importar el hook useQuery, que este recibe dos parámetros, el primero un arry de keys que se usa para reconocerlo, en este ejm estamos haciendo users pues usaremos esa key para reconocer esa parte del estado, aunque podemos pasarle, mas keys, como por ejemplo page, filtros de busqueda etc solo cuando tenga sentido, el segundo parámetro sería la forma en que queremos que traiga la peticion, es una funcion asíncrona que le decimos como traiga la información la petición, que puede ser una función o un servicio ejm

    const { isLoading, isError, data: users = [], refetch } = useQuery<User[]>(
        ['users'], // <- key de la información o query
        async () => await fetchUsers(1) // <- como tiene que traer la información
    )

    Esto lo que nos permite es eliminar el useEffect para hacer las peticiones a una API, si usamos react-query, para las peticiones fetch nos evita el uso del useEffect, porque el useQuery en el segunda parámetro que le estamos pasando este ya hace la peticion asíncrona por nosotros.


  3) Tiene otro hooks que nos permite hacer una páginación infinita llamado useInfiniteQuery ver ejm en hooks/useUsers.ts

  Con esto tenemos nosotos un estado global donde podemos nosotros solo acceder al hook que creamos y a los usuarios, y toda la información que queremos nosotros obtener, podemos compartir la información donde queremos.