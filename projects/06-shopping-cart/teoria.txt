!!! CONTEXT !!!.- Esto nos sirve oara evitar el prop driling en React, el propdriling es lo que comunmente hacemos en React, de pasar de componente en componente los props hasta llegar al componente donde lo necesita aunque los otros componentes no lo necesiten. El contexto es una forma donde nosotros podemos crear lÃ³gica dentro, luego servimos o proveemos ese contexto y tenemos que envolver los componentes que queremos con ese contexto para poder hacer uso del mismo. Este estado lo tiene el contexto y el que quiera lo va a poder leer sin necesidad de psarle las props de componente en componente. Con esto desacomplamos directamente toda la lÃ³gica en una parte totalemnte separada y ademÃ¡s que cualquier que lo necesite lo puede leer de ese lugar. El contexto es algo que estÃ¡ totalmente separado de nuestro Ã¡rbol de componentes que se puede leer de una forma separada, entonces tenemos 3 paso:

- Crear el contexto. (Crear)
- Servir el provider del contexto. (Proveer)
- Envolver nuestros componentes o App principal con el provider. (Consumir).

ejm filters.jsx
// crear
import { createContext } from 'react'
export const FiltersContext = createContext()

// Proveer => aqui podemos tener estados, lÃ³gica controlada aquÃ­, porque, porque el contexto como estÃ¡ fuera del componente vamos a tener un solo estado de este contexto y su estado se vaa compartir asÃ­ tendremos un estado global.

export const FiltersProvider = ({ children }) => {
  return (
    <FiltersContext.Provider value={{ 
        category: 'all',
        minPrice: '0'
    }}>
      {children}
    </FiltersContext.Provider>
  )
}

// consumir (useContext) => el filters tendrÃ¡ lo que le pasamos en el value al provider.
useFilters.js
const filters = useContext(FiltersContext)

En React debemos de tener una sola fuente de la verdad siempre, porque aveces tenemos un estado local y un global, porque no sabemos de cual fiarnos, porque podemos nosotros podemos tener el estado global iniciado en 100 y el global iniciamos en cero y no tiene confianza nuestra UI. ====> ejm

// dos fuentes de la verdad
export function Filters () {
  const { setFilters } = useFilters() => estado global 
  const [minPrice, setMinPrice] = useState(0) => estado local
  const minPriceFilterId = useId()
  const categoryFilterId = useId()


  const handleChange = (e) => {
    // dos fuentes de la verdad
    setMinPrice(e.target.value)
    setFilters(prevState => ({ => cambiando el estado global.
      ...prevState,
      minPrice: e.target.value
    }))
  }

  const handleChangeCategory = (e) => {
    setFilters(prevState => ({
      ...prevState,
      category: e.target.value
    }))
  }
  ....
  

// una fuente de la verdad nos fiamos del estado global asÃ­ siemore serÃ¡ el mismo en toda la app.

export function Filters () {
  const { filters, setFilters } = useFilters()
  const minPriceFilterId = useId()
  const categoryFilterId = useId()

  const handleChange = (e) => {
    setFilters(prevState => ({
      ...prevState,
      minPrice: e.target.value
    }))
  }

  const handleChangeCategory = (e) => {
    setFilters(prevState => ({
      ...prevState,
      category: e.target.value
    }))
  }

  return (
    <section className='filters'>
      <div>
        <label htmlFor={minPriceFilterId}>Price</label>
        <input
          onChange={handleChange}
          type='range'
          id={minPriceFilterId}
          min='0'
          max='1000'
          value={filters.minPrice}
        />
        <span>${filters.minPrice}</span>
      </div>

** Una buena prÃ¡ctica que se usa mucho en los contexttos es verificar si dicho contexto que ha leÃ­do es undefined, si es undefined quiere decir normalmente qeue estamos usando este hook en un lugar que no podemos, porque una parte de mi aplicaciÃ³n no estÃ¡ envuelta en un Provider.

import { useContext } from 'react'
import { CartContext } from '../context/cart'

export function useCart () {
  const context = useContext(CartContext)
  if (context === undefined) { => control undefined
    throw new Error('useCart muste be used within a CartProvider')
  }
  return context
}

La lÃ³gica de aÃ±adir un producto a un cart de compras es que debemos primero chequear si el producto estÃ¡ dentro del carrito depende si estÃ¡ por ejm podemos sumarle uno a la cantidad para que sume la cantidad antes que agregue otro producto igual y si no tenemos ese producto pues lo aÃ±adimos. ====> EJM 

const addToCart = product => {
  // check if the product is already in the cart
  const productInCart = cart.findIndex(item => item.id === product.id)

  if (productInCart > 0) {
    // structreClone hace copias profundas de un array u objetos.
    const newCart = structuredClone(cart)
    // sumamo al quantity uno si el producto nuevo tiene ese index productCart
    newCart[productInCart].quantity += 1
    // retornamos el nuevo estado.
    return setCart(newCart)
  }

  // si el product no estÃ¡ en el carrito
  setCart(prevState => ([
    // agregamos todo lo que ya tenÃ­a
    ...prevState,

    {
    // agregamos el nuevo producto con el ... le pasamos todo el producto todo todo, y colocamos el auqntity en 1
      ...product,
      quantity: 1
    }
  ]))
}

NOTA.- Esta es otra forma de crear un reducer sin necesidad de un switch ====> ejm

const UPDATE_STATE_BY_ACTION = {
  [CART_ACTION_TYPES.ADD_TO_CART]: (state, action) => {
    const { id } = action.payload
    const productInCartIndex = state.findIndex(item => item.id === id)

    if (productInCartIndex >= 0) {
      // ðŸ‘€ una forma serÃ­a usando structuredClone
      // const newState = structuredClone(state)
      // newState[productInCartIndex].quantity += 1

      // ðŸ‘¶ usando el map
      // const newState = state.map(item => {
      //   if (item.id === id) {
      //     return {
      //       ...item,
      //       quantity: item.quantity + 1
      //     }
      //   }

      //   return item
      // })

      // âš¡ usando el spread operator y slice forma mÃ¡s rÃ¡pida y Ã³ptima.
      const newState = [
        ...state.slice(0, productInCartIndex),
        { ...state[productInCartIndex], quantity: state[productInCartIndex].quantity + 1 },
        ...state.slice(productInCartIndex + 1)
      ]

      updateLocalStorage(newState)
      return newState
    }

    const newState = [
      ...state,
      {
        ...action.payload, // product
        quantity: 1
      }
    ]

    updateLocalStorage(newState)
    return newState
  },
  [CART_ACTION_TYPES.REMOVE_FROM_CART]: (state, action) => {
    const { id } = action.payload
    const newState = state.filter(item => item.id !== id)
    updateLocalStorage(newState)
    return newState
  },
  [CART_ACTION_TYPES.CLEAR_CART]: () => {
    updateLocalStorage([])
    return []
  }
}

export const cartReducer = (state, action) => {
  const { type: actionType } = action
  const updateState = UPDATE_STATE_BY_ACTION[actionType]
  return updateState ? updateState(state, action) : state
}